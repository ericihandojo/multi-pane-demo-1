// This component represents the right pane of the application, which displays tabs with user information in a tree structure.
// It allows users to open multiple tabs, each showing details of a user in a nested tree format.
// It also provides functionality to close tabs and manage the visibility of the right pane.

import { Component, Input, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatTabsModule } from '@angular/material/tabs';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatTreeModule } from '@angular/material/tree';
import { NestedTreeControl } from '@angular/cdk/tree';
import { MatTreeNestedDataSource } from '@angular/material/tree';
import { BehaviorSubject } from 'rxjs';

interface User {
  firstName: string;
  lastName: string;
  address: string;
  email: string;
  phone: string;
}

interface TreeNode {
  name: string;
  children?: TreeNode[];
}

// Add color info to each tab
interface Tab {
  label: string;
  color: string;
  treeControl: NestedTreeControl<TreeNode>;
  dataSource: MatTreeNestedDataSource<TreeNode>;
}

@Component({
  selector: 'app-right-pane',
  standalone: true,
  imports: [
    CommonModule,
    MatTabsModule,
    MatIconModule,
    MatButtonModule,
    MatTreeModule
  ],
  template: `
    <div class="right-container" *ngIf="visible">
      <mat-tab-group animationDuration="0ms" [(selectedIndex)]="selectedTabIndex">
        <mat-tab *ngFor="let tab of tabs; let i = index">
          <ng-template mat-tab-label>
            <div class="tab-label" [style.border-left]="'4px solid ' + tab.color">
              {{ tab.label }}
              <button mat-icon-button (click)="closeTab(i)" class="close-btn">
                <mat-icon>close</mat-icon>
              </button>
            </div>
          </ng-template>
          <mat-tree [dataSource]="tab.dataSource" [treeControl]="tab.treeControl">
            <!-- Parent node -->
            <mat-tree-node *matTreeNodeDef="let node; when: hasChildren" class="node-parent">
              <button mat-icon-button matTreeNodeToggle>
                <mat-icon>
                  {{ tab.treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}
                </mat-icon>
              </button>
              {{ node.name }}
            </mat-tree-node>
            <!-- Leaf node -->
            <mat-tree-node *matTreeNodeDef="let node; when: isLeaf" class="node-leaf">
              <button mat-icon-button disabled></button>
              {{ node.name }}
            </mat-tree-node>
          </mat-tree>
        </mat-tab>
      </mat-tab-group>
    </div>
  `,
  styles: [`
    .right-container {
      height: 100%;
      overflow-y: auto;
      background-color: #f5f5f5;
      display: flex;
      flex-direction: column;
    }
    mat-tab-group {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    mat-tab-group .mat-tab-body-wrapper {
      flex: 1;
      overflow: auto;
    }
    .tab-label {
      display: inline-flex;
      align-items: center;
      padding-left: 4px;
      height: 32px;
    }
    .close-btn {
      margin-left: 8px;
      width: 24px;
      height: 24px;
      min-width: 24px;
    }
    .node-parent,
    .node-leaf {
      display: flex;
      align-items: center;
      height: 32px;
    }
  `]
})
export class RightPaneComponent implements OnInit {
  /** Controls visibility */
  @Input() visible = true;
  
  /** Emits submenu names when center-pane selection changes */
  @Input() newTabLabel$!: BehaviorSubject<string | null>;

  /** List of all users from center pane */
  @Input() userList$!: BehaviorSubject<User[]>;

  // List of tabs with user data
  tabs: {
    label: string;
    color: string;
    treeControl: NestedTreeControl<TreeNode>;
    dataSource: MatTreeNestedDataSource<TreeNode>;
  }[] = [];

  // Currently selected tab index
  selectedTabIndex = 0;

  ngOnInit() {
    // Subscribe to newTabLabel$ to add tabs whenever a submenu is selected
    this.newTabLabel$.subscribe(label => {
      if (label) {
        this.addTab(label);
      }
    });
  }

  /** Generate a contrasting color (random pastel) */
  private generateColor(): string {
    const r = Math.floor(Math.random() * 156) + 100;
    const g = Math.floor(Math.random() * 156) + 100;
    const b = Math.floor(Math.random() * 156) + 100;
    return `rgb(${r}, ${g}, ${b})`;
  }

  private addTab(label: string) {
    const color = this.generateColor();
    const users = this.userList$.getValue();

    // Build tree data
    const nodes: TreeNode[] = users.map(u => ({
      name: u.lastName,
      children: [
        { name: `First: ${u.firstName}` },
        { name: `Address: ${u.address}` },
        { name: `Email: ${u.email}` },
        { name: `Phone: ${u.phone}` }
      ]
    }));

    const treeControl = new NestedTreeControl<TreeNode>(node => node.children || []);
    const dataSource = new MatTreeNestedDataSource<TreeNode>();
    dataSource.data = nodes;

    this.tabs.push({ label, color, treeControl, dataSource });
    this.selectedTabIndex = this.tabs.length - 1;
  }

  hasChildren = (_: number, node: TreeNode) => !!node.children && node.children.length > 0;
  isLeaf    = (_: number, node: TreeNode) => !node.children || node.children.length === 0;

  closeTab(index: number) {
    this.tabs.splice(index, 1);
    if (this.selectedTabIndex >= this.tabs.length) {
      this.selectedTabIndex = this.tabs.length - 1;
    }
  }
}
